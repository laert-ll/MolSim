// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimulationInputSpec.hxx"

// OutputFilesType
//

const OutputFilesType::BaseName_type& OutputFilesType::
BaseName () const
{
  return this->BaseName_.get ();
}

OutputFilesType::BaseName_type& OutputFilesType::
BaseName ()
{
  return this->BaseName_.get ();
}

void OutputFilesType::
BaseName (const BaseName_type& x)
{
  this->BaseName_.set (x);
}

void OutputFilesType::
BaseName (::std::unique_ptr< BaseName_type > x)
{
  this->BaseName_.set (std::move (x));
}

const OutputFilesType::WriteFrequency_type& OutputFilesType::
WriteFrequency () const
{
  return this->WriteFrequency_.get ();
}

OutputFilesType::WriteFrequency_type& OutputFilesType::
WriteFrequency ()
{
  return this->WriteFrequency_.get ();
}

void OutputFilesType::
WriteFrequency (const WriteFrequency_type& x)
{
  this->WriteFrequency_.set (x);
}


// SimulationParametersType
//

const SimulationParametersType::EndT_type& SimulationParametersType::
EndT () const
{
  return this->EndT_.get ();
}

SimulationParametersType::EndT_type& SimulationParametersType::
EndT ()
{
  return this->EndT_.get ();
}

void SimulationParametersType::
EndT (const EndT_type& x)
{
  this->EndT_.set (x);
}

const SimulationParametersType::DeltaT_type& SimulationParametersType::
DeltaT () const
{
  return this->DeltaT_.get ();
}

SimulationParametersType::DeltaT_type& SimulationParametersType::
DeltaT ()
{
  return this->DeltaT_.get ();
}

void SimulationParametersType::
DeltaT (const DeltaT_type& x)
{
  this->DeltaT_.set (x);
}


// CuboidsType
//

const CuboidsType::Cuboid_sequence& CuboidsType::
Cuboid () const
{
  return this->Cuboid_;
}

CuboidsType::Cuboid_sequence& CuboidsType::
Cuboid ()
{
  return this->Cuboid_;
}

void CuboidsType::
Cuboid (const Cuboid_sequence& s)
{
  this->Cuboid_ = s;
}


// CuboidType
//

const CuboidType::LowerLeftFrontCorner_type& CuboidType::
LowerLeftFrontCorner () const
{
  return this->LowerLeftFrontCorner_.get ();
}

CuboidType::LowerLeftFrontCorner_type& CuboidType::
LowerLeftFrontCorner ()
{
  return this->LowerLeftFrontCorner_.get ();
}

void CuboidType::
LowerLeftFrontCorner (const LowerLeftFrontCorner_type& x)
{
  this->LowerLeftFrontCorner_.set (x);
}

void CuboidType::
LowerLeftFrontCorner (::std::unique_ptr< LowerLeftFrontCorner_type > x)
{
  this->LowerLeftFrontCorner_.set (std::move (x));
}

const CuboidType::NumParticlesPerDimension_type& CuboidType::
NumParticlesPerDimension () const
{
  return this->NumParticlesPerDimension_.get ();
}

CuboidType::NumParticlesPerDimension_type& CuboidType::
NumParticlesPerDimension ()
{
  return this->NumParticlesPerDimension_.get ();
}

void CuboidType::
NumParticlesPerDimension (const NumParticlesPerDimension_type& x)
{
  this->NumParticlesPerDimension_.set (x);
}

void CuboidType::
NumParticlesPerDimension (::std::unique_ptr< NumParticlesPerDimension_type > x)
{
  this->NumParticlesPerDimension_.set (std::move (x));
}

const CuboidType::Distance_type& CuboidType::
Distance () const
{
  return this->Distance_.get ();
}

CuboidType::Distance_type& CuboidType::
Distance ()
{
  return this->Distance_.get ();
}

void CuboidType::
Distance (const Distance_type& x)
{
  this->Distance_.set (x);
}

const CuboidType::Mass_type& CuboidType::
Mass () const
{
  return this->Mass_.get ();
}

CuboidType::Mass_type& CuboidType::
Mass ()
{
  return this->Mass_.get ();
}

void CuboidType::
Mass (const Mass_type& x)
{
  this->Mass_.set (x);
}

const CuboidType::StartV_type& CuboidType::
StartV () const
{
  return this->StartV_.get ();
}

CuboidType::StartV_type& CuboidType::
StartV ()
{
  return this->StartV_.get ();
}

void CuboidType::
StartV (const StartV_type& x)
{
  this->StartV_.set (x);
}

void CuboidType::
StartV (::std::unique_ptr< StartV_type > x)
{
  this->StartV_.set (std::move (x));
}

const CuboidType::MeanV_type& CuboidType::
MeanV () const
{
  return this->MeanV_.get ();
}

CuboidType::MeanV_type& CuboidType::
MeanV ()
{
  return this->MeanV_.get ();
}

void CuboidType::
MeanV (const MeanV_type& x)
{
  this->MeanV_.set (x);
}

const CuboidType::Dimension_type& CuboidType::
Dimension () const
{
  return this->Dimension_.get ();
}

CuboidType::Dimension_type& CuboidType::
Dimension ()
{
  return this->Dimension_.get ();
}

void CuboidType::
Dimension (const Dimension_type& x)
{
  this->Dimension_.set (x);
}


// ArrayFloat3
//

const ArrayFloat3::X_type& ArrayFloat3::
X () const
{
  return this->X_.get ();
}

ArrayFloat3::X_type& ArrayFloat3::
X ()
{
  return this->X_.get ();
}

void ArrayFloat3::
X (const X_type& x)
{
  this->X_.set (x);
}

const ArrayFloat3::Y_type& ArrayFloat3::
Y () const
{
  return this->Y_.get ();
}

ArrayFloat3::Y_type& ArrayFloat3::
Y ()
{
  return this->Y_.get ();
}

void ArrayFloat3::
Y (const Y_type& x)
{
  this->Y_.set (x);
}

const ArrayFloat3::Z_type& ArrayFloat3::
Z () const
{
  return this->Z_.get ();
}

ArrayFloat3::Z_type& ArrayFloat3::
Z ()
{
  return this->Z_.get ();
}

void ArrayFloat3::
Z (const Z_type& x)
{
  this->Z_.set (x);
}


// ArrayInt3
//

const ArrayInt3::X_type& ArrayInt3::
X () const
{
  return this->X_.get ();
}

ArrayInt3::X_type& ArrayInt3::
X ()
{
  return this->X_.get ();
}

void ArrayInt3::
X (const X_type& x)
{
  this->X_.set (x);
}

const ArrayInt3::Y_type& ArrayInt3::
Y () const
{
  return this->Y_.get ();
}

ArrayInt3::Y_type& ArrayInt3::
Y ()
{
  return this->Y_.get ();
}

void ArrayInt3::
Y (const Y_type& x)
{
  this->Y_.set (x);
}

const ArrayInt3::Z_type& ArrayInt3::
Z () const
{
  return this->Z_.get ();
}

ArrayInt3::Z_type& ArrayInt3::
Z ()
{
  return this->Z_.get ();
}

void ArrayInt3::
Z (const Z_type& x)
{
  this->Z_.set (x);
}


// SimulationInput
//

const SimulationInput::OutputFiles_type& SimulationInput::
OutputFiles () const
{
  return this->OutputFiles_.get ();
}

SimulationInput::OutputFiles_type& SimulationInput::
OutputFiles ()
{
  return this->OutputFiles_.get ();
}

void SimulationInput::
OutputFiles (const OutputFiles_type& x)
{
  this->OutputFiles_.set (x);
}

void SimulationInput::
OutputFiles (::std::unique_ptr< OutputFiles_type > x)
{
  this->OutputFiles_.set (std::move (x));
}

const SimulationInput::SimulationParameters_type& SimulationInput::
SimulationParameters () const
{
  return this->SimulationParameters_.get ();
}

SimulationInput::SimulationParameters_type& SimulationInput::
SimulationParameters ()
{
  return this->SimulationParameters_.get ();
}

void SimulationInput::
SimulationParameters (const SimulationParameters_type& x)
{
  this->SimulationParameters_.set (x);
}

void SimulationInput::
SimulationParameters (::std::unique_ptr< SimulationParameters_type > x)
{
  this->SimulationParameters_.set (std::move (x));
}

const SimulationInput::Cuboids_type& SimulationInput::
Cuboids () const
{
  return this->Cuboids_.get ();
}

SimulationInput::Cuboids_type& SimulationInput::
Cuboids ()
{
  return this->Cuboids_.get ();
}

void SimulationInput::
Cuboids (const Cuboids_type& x)
{
  this->Cuboids_.set (x);
}

void SimulationInput::
Cuboids (::std::unique_ptr< Cuboids_type > x)
{
  this->Cuboids_.set (std::move (x));
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// OutputFilesType
//

OutputFilesType::
OutputFilesType (const BaseName_type& BaseName,
                 const WriteFrequency_type& WriteFrequency)
: ::xml_schema::type (),
  BaseName_ (BaseName, this),
  WriteFrequency_ (WriteFrequency, this)
{
}

OutputFilesType::
OutputFilesType (const OutputFilesType& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  BaseName_ (x.BaseName_, f, this),
  WriteFrequency_ (x.WriteFrequency_, f, this)
{
}

OutputFilesType::
OutputFilesType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  BaseName_ (this),
  WriteFrequency_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void OutputFilesType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // BaseName
    //
    if (n.name () == "BaseName" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< BaseName_type > r (
        BaseName_traits::create (i, f, this));

      if (!BaseName_.present ())
      {
        this->BaseName_.set (::std::move (r));
        continue;
      }
    }

    // WriteFrequency
    //
    if (n.name () == "WriteFrequency" && n.namespace_ ().empty ())
    {
      if (!WriteFrequency_.present ())
      {
        this->WriteFrequency_.set (WriteFrequency_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!BaseName_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "BaseName",
      "");
  }

  if (!WriteFrequency_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "WriteFrequency",
      "");
  }
}

OutputFilesType* OutputFilesType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class OutputFilesType (*this, f, c);
}

OutputFilesType& OutputFilesType::
operator= (const OutputFilesType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->BaseName_ = x.BaseName_;
    this->WriteFrequency_ = x.WriteFrequency_;
  }

  return *this;
}

OutputFilesType::
~OutputFilesType ()
{
}

// SimulationParametersType
//

SimulationParametersType::
SimulationParametersType (const EndT_type& EndT,
                          const DeltaT_type& DeltaT)
: ::xml_schema::type (),
  EndT_ (EndT, this),
  DeltaT_ (DeltaT, this)
{
}

SimulationParametersType::
SimulationParametersType (const SimulationParametersType& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  EndT_ (x.EndT_, f, this),
  DeltaT_ (x.DeltaT_, f, this)
{
}

SimulationParametersType::
SimulationParametersType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  EndT_ (this),
  DeltaT_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void SimulationParametersType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // EndT
    //
    if (n.name () == "EndT" && n.namespace_ ().empty ())
    {
      if (!EndT_.present ())
      {
        this->EndT_.set (EndT_traits::create (i, f, this));
        continue;
      }
    }

    // DeltaT
    //
    if (n.name () == "DeltaT" && n.namespace_ ().empty ())
    {
      if (!DeltaT_.present ())
      {
        this->DeltaT_.set (DeltaT_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!EndT_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "EndT",
      "");
  }

  if (!DeltaT_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "DeltaT",
      "");
  }
}

SimulationParametersType* SimulationParametersType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class SimulationParametersType (*this, f, c);
}

SimulationParametersType& SimulationParametersType::
operator= (const SimulationParametersType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->EndT_ = x.EndT_;
    this->DeltaT_ = x.DeltaT_;
  }

  return *this;
}

SimulationParametersType::
~SimulationParametersType ()
{
}

// CuboidsType
//

CuboidsType::
CuboidsType ()
: ::xml_schema::type (),
  Cuboid_ (this)
{
}

CuboidsType::
CuboidsType (const CuboidsType& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  Cuboid_ (x.Cuboid_, f, this)
{
}

CuboidsType::
CuboidsType (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  Cuboid_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void CuboidsType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Cuboid
    //
    if (n.name () == "Cuboid" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< Cuboid_type > r (
        Cuboid_traits::create (i, f, this));

      this->Cuboid_.push_back (::std::move (r));
      continue;
    }

    break;
  }
}

CuboidsType* CuboidsType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class CuboidsType (*this, f, c);
}

CuboidsType& CuboidsType::
operator= (const CuboidsType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->Cuboid_ = x.Cuboid_;
  }

  return *this;
}

CuboidsType::
~CuboidsType ()
{
}

// CuboidType
//

CuboidType::
CuboidType (const LowerLeftFrontCorner_type& LowerLeftFrontCorner,
            const NumParticlesPerDimension_type& NumParticlesPerDimension,
            const Distance_type& Distance,
            const Mass_type& Mass,
            const StartV_type& StartV,
            const MeanV_type& MeanV,
            const Dimension_type& Dimension)
: ::xml_schema::type (),
  LowerLeftFrontCorner_ (LowerLeftFrontCorner, this),
  NumParticlesPerDimension_ (NumParticlesPerDimension, this),
  Distance_ (Distance, this),
  Mass_ (Mass, this),
  StartV_ (StartV, this),
  MeanV_ (MeanV, this),
  Dimension_ (Dimension, this)
{
}

CuboidType::
CuboidType (::std::unique_ptr< LowerLeftFrontCorner_type > LowerLeftFrontCorner,
            ::std::unique_ptr< NumParticlesPerDimension_type > NumParticlesPerDimension,
            const Distance_type& Distance,
            const Mass_type& Mass,
            ::std::unique_ptr< StartV_type > StartV,
            const MeanV_type& MeanV,
            const Dimension_type& Dimension)
: ::xml_schema::type (),
  LowerLeftFrontCorner_ (std::move (LowerLeftFrontCorner), this),
  NumParticlesPerDimension_ (std::move (NumParticlesPerDimension), this),
  Distance_ (Distance, this),
  Mass_ (Mass, this),
  StartV_ (std::move (StartV), this),
  MeanV_ (MeanV, this),
  Dimension_ (Dimension, this)
{
}

CuboidType::
CuboidType (const CuboidType& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  LowerLeftFrontCorner_ (x.LowerLeftFrontCorner_, f, this),
  NumParticlesPerDimension_ (x.NumParticlesPerDimension_, f, this),
  Distance_ (x.Distance_, f, this),
  Mass_ (x.Mass_, f, this),
  StartV_ (x.StartV_, f, this),
  MeanV_ (x.MeanV_, f, this),
  Dimension_ (x.Dimension_, f, this)
{
}

CuboidType::
CuboidType (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  LowerLeftFrontCorner_ (this),
  NumParticlesPerDimension_ (this),
  Distance_ (this),
  Mass_ (this),
  StartV_ (this),
  MeanV_ (this),
  Dimension_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void CuboidType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // LowerLeftFrontCorner
    //
    if (n.name () == "LowerLeftFrontCorner" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< LowerLeftFrontCorner_type > r (
        LowerLeftFrontCorner_traits::create (i, f, this));

      if (!LowerLeftFrontCorner_.present ())
      {
        this->LowerLeftFrontCorner_.set (::std::move (r));
        continue;
      }
    }

    // NumParticlesPerDimension
    //
    if (n.name () == "NumParticlesPerDimension" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< NumParticlesPerDimension_type > r (
        NumParticlesPerDimension_traits::create (i, f, this));

      if (!NumParticlesPerDimension_.present ())
      {
        this->NumParticlesPerDimension_.set (::std::move (r));
        continue;
      }
    }

    // Distance
    //
    if (n.name () == "Distance" && n.namespace_ ().empty ())
    {
      if (!Distance_.present ())
      {
        this->Distance_.set (Distance_traits::create (i, f, this));
        continue;
      }
    }

    // Mass
    //
    if (n.name () == "Mass" && n.namespace_ ().empty ())
    {
      if (!Mass_.present ())
      {
        this->Mass_.set (Mass_traits::create (i, f, this));
        continue;
      }
    }

    // StartV
    //
    if (n.name () == "StartV" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< StartV_type > r (
        StartV_traits::create (i, f, this));

      if (!StartV_.present ())
      {
        this->StartV_.set (::std::move (r));
        continue;
      }
    }

    // MeanV
    //
    if (n.name () == "MeanV" && n.namespace_ ().empty ())
    {
      if (!MeanV_.present ())
      {
        this->MeanV_.set (MeanV_traits::create (i, f, this));
        continue;
      }
    }

    // Dimension
    //
    if (n.name () == "Dimension" && n.namespace_ ().empty ())
    {
      if (!Dimension_.present ())
      {
        this->Dimension_.set (Dimension_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!LowerLeftFrontCorner_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "LowerLeftFrontCorner",
      "");
  }

  if (!NumParticlesPerDimension_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "NumParticlesPerDimension",
      "");
  }

  if (!Distance_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Distance",
      "");
  }

  if (!Mass_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Mass",
      "");
  }

  if (!StartV_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "StartV",
      "");
  }

  if (!MeanV_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "MeanV",
      "");
  }

  if (!Dimension_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Dimension",
      "");
  }
}

CuboidType* CuboidType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class CuboidType (*this, f, c);
}

CuboidType& CuboidType::
operator= (const CuboidType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->LowerLeftFrontCorner_ = x.LowerLeftFrontCorner_;
    this->NumParticlesPerDimension_ = x.NumParticlesPerDimension_;
    this->Distance_ = x.Distance_;
    this->Mass_ = x.Mass_;
    this->StartV_ = x.StartV_;
    this->MeanV_ = x.MeanV_;
    this->Dimension_ = x.Dimension_;
  }

  return *this;
}

CuboidType::
~CuboidType ()
{
}

// ArrayFloat3
//

ArrayFloat3::
ArrayFloat3 (const X_type& X,
             const Y_type& Y,
             const Z_type& Z)
: ::xml_schema::type (),
  X_ (X, this),
  Y_ (Y, this),
  Z_ (Z, this)
{
}

ArrayFloat3::
ArrayFloat3 (const ArrayFloat3& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  X_ (x.X_, f, this),
  Y_ (x.Y_, f, this),
  Z_ (x.Z_, f, this)
{
}

ArrayFloat3::
ArrayFloat3 (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  X_ (this),
  Y_ (this),
  Z_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void ArrayFloat3::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // X
    //
    if (n.name () == "X" && n.namespace_ ().empty ())
    {
      if (!X_.present ())
      {
        this->X_.set (X_traits::create (i, f, this));
        continue;
      }
    }

    // Y
    //
    if (n.name () == "Y" && n.namespace_ ().empty ())
    {
      if (!Y_.present ())
      {
        this->Y_.set (Y_traits::create (i, f, this));
        continue;
      }
    }

    // Z
    //
    if (n.name () == "Z" && n.namespace_ ().empty ())
    {
      if (!Z_.present ())
      {
        this->Z_.set (Z_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!X_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "X",
      "");
  }

  if (!Y_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Y",
      "");
  }

  if (!Z_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Z",
      "");
  }
}

ArrayFloat3* ArrayFloat3::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class ArrayFloat3 (*this, f, c);
}

ArrayFloat3& ArrayFloat3::
operator= (const ArrayFloat3& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->X_ = x.X_;
    this->Y_ = x.Y_;
    this->Z_ = x.Z_;
  }

  return *this;
}

ArrayFloat3::
~ArrayFloat3 ()
{
}

// ArrayInt3
//

ArrayInt3::
ArrayInt3 (const X_type& X,
           const Y_type& Y,
           const Z_type& Z)
: ::xml_schema::type (),
  X_ (X, this),
  Y_ (Y, this),
  Z_ (Z, this)
{
}

ArrayInt3::
ArrayInt3 (const ArrayInt3& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  X_ (x.X_, f, this),
  Y_ (x.Y_, f, this),
  Z_ (x.Z_, f, this)
{
}

ArrayInt3::
ArrayInt3 (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  X_ (this),
  Y_ (this),
  Z_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void ArrayInt3::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // X
    //
    if (n.name () == "X" && n.namespace_ ().empty ())
    {
      if (!X_.present ())
      {
        this->X_.set (X_traits::create (i, f, this));
        continue;
      }
    }

    // Y
    //
    if (n.name () == "Y" && n.namespace_ ().empty ())
    {
      if (!Y_.present ())
      {
        this->Y_.set (Y_traits::create (i, f, this));
        continue;
      }
    }

    // Z
    //
    if (n.name () == "Z" && n.namespace_ ().empty ())
    {
      if (!Z_.present ())
      {
        this->Z_.set (Z_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!X_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "X",
      "");
  }

  if (!Y_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Y",
      "");
  }

  if (!Z_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Z",
      "");
  }
}

ArrayInt3* ArrayInt3::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class ArrayInt3 (*this, f, c);
}

ArrayInt3& ArrayInt3::
operator= (const ArrayInt3& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->X_ = x.X_;
    this->Y_ = x.Y_;
    this->Z_ = x.Z_;
  }

  return *this;
}

ArrayInt3::
~ArrayInt3 ()
{
}

// SimulationInput
//

SimulationInput::
SimulationInput (const OutputFiles_type& OutputFiles,
                 const SimulationParameters_type& SimulationParameters,
                 const Cuboids_type& Cuboids)
: ::xml_schema::type (),
  OutputFiles_ (OutputFiles, this),
  SimulationParameters_ (SimulationParameters, this),
  Cuboids_ (Cuboids, this)
{
}

SimulationInput::
SimulationInput (::std::unique_ptr< OutputFiles_type > OutputFiles,
                 ::std::unique_ptr< SimulationParameters_type > SimulationParameters,
                 ::std::unique_ptr< Cuboids_type > Cuboids)
: ::xml_schema::type (),
  OutputFiles_ (std::move (OutputFiles), this),
  SimulationParameters_ (std::move (SimulationParameters), this),
  Cuboids_ (std::move (Cuboids), this)
{
}

SimulationInput::
SimulationInput (const SimulationInput& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  OutputFiles_ (x.OutputFiles_, f, this),
  SimulationParameters_ (x.SimulationParameters_, f, this),
  Cuboids_ (x.Cuboids_, f, this)
{
}

SimulationInput::
SimulationInput (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  OutputFiles_ (this),
  SimulationParameters_ (this),
  Cuboids_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void SimulationInput::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // OutputFiles
    //
    if (n.name () == "OutputFiles" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< OutputFiles_type > r (
        OutputFiles_traits::create (i, f, this));

      if (!OutputFiles_.present ())
      {
        this->OutputFiles_.set (::std::move (r));
        continue;
      }
    }

    // SimulationParameters
    //
    if (n.name () == "SimulationParameters" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< SimulationParameters_type > r (
        SimulationParameters_traits::create (i, f, this));

      if (!SimulationParameters_.present ())
      {
        this->SimulationParameters_.set (::std::move (r));
        continue;
      }
    }

    // Cuboids
    //
    if (n.name () == "Cuboids" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< Cuboids_type > r (
        Cuboids_traits::create (i, f, this));

      if (!Cuboids_.present ())
      {
        this->Cuboids_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!OutputFiles_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "OutputFiles",
      "");
  }

  if (!SimulationParameters_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "SimulationParameters",
      "");
  }

  if (!Cuboids_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Cuboids",
      "");
  }
}

SimulationInput* SimulationInput::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class SimulationInput (*this, f, c);
}

SimulationInput& SimulationInput::
operator= (const SimulationInput& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->OutputFiles_ = x.OutputFiles_;
    this->SimulationParameters_ = x.SimulationParameters_;
    this->Cuboids_ = x.Cuboids_;
  }

  return *this;
}

SimulationInput::
~SimulationInput ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::unique_ptr< ::SimulationInput >
SimulationInput_ (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::SimulationInput > (
    ::SimulationInput_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::SimulationInput >
SimulationInput_ (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::SimulationInput > (
    ::SimulationInput_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::SimulationInput >
SimulationInput_ (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::SimulationInput > (
    ::SimulationInput_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::SimulationInput >
SimulationInput_ (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::SimulationInput_ (isrc, f, p);
}

::std::unique_ptr< ::SimulationInput >
SimulationInput_ (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::SimulationInput_ (isrc, h, f, p);
}

::std::unique_ptr< ::SimulationInput >
SimulationInput_ (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::SimulationInput_ (isrc, h, f, p);
}

::std::unique_ptr< ::SimulationInput >
SimulationInput_ (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::SimulationInput_ (isrc, f, p);
}

::std::unique_ptr< ::SimulationInput >
SimulationInput_ (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::SimulationInput_ (isrc, h, f, p);
}

::std::unique_ptr< ::SimulationInput >
SimulationInput_ (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::SimulationInput_ (isrc, h, f, p);
}

::std::unique_ptr< ::SimulationInput >
SimulationInput_ (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::SimulationInput > (
    ::SimulationInput_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::SimulationInput >
SimulationInput_ (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::SimulationInput > (
    ::SimulationInput_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::SimulationInput >
SimulationInput_ (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::SimulationInput > (
    ::SimulationInput_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::SimulationInput >
SimulationInput_ (const ::xercesc::DOMDocument& doc,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::unique_ptr< ::SimulationInput > (
      ::SimulationInput_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "SimulationInput" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::SimulationInput > r (
      ::xsd::cxx::tree::traits< ::SimulationInput, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "SimulationInput",
    "");
}

::std::unique_ptr< ::SimulationInput >
SimulationInput_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "SimulationInput" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::SimulationInput > r (
      ::xsd::cxx::tree::traits< ::SimulationInput, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "SimulationInput",
    "");
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

