// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

#ifndef SIMULATION_INPUT_SPEC_HXX
#define SIMULATION_INPUT_SPEC_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (LIBXSD_VERSION != 400002000000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class OutputFilesType;
class SimulationParametersType;
class CuboidsType;
class CuboidType;
class ArrayFloat3;
class ArrayInt3;
class SimulationInput;

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class OutputFilesType: public ::xml_schema::type
{
  public:
  // BaseName
  //
  typedef ::xml_schema::string BaseName_type;
  typedef ::xsd::cxx::tree::traits< BaseName_type, char > BaseName_traits;

  const BaseName_type&
  BaseName () const;

  BaseName_type&
  BaseName ();

  void
  BaseName (const BaseName_type& x);

  void
  BaseName (::std::unique_ptr< BaseName_type > p);

  // WriteFrequency
  //
  typedef ::xml_schema::int_ WriteFrequency_type;
  typedef ::xsd::cxx::tree::traits< WriteFrequency_type, char > WriteFrequency_traits;

  const WriteFrequency_type&
  WriteFrequency () const;

  WriteFrequency_type&
  WriteFrequency ();

  void
  WriteFrequency (const WriteFrequency_type& x);

  // Constructors.
  //
  OutputFilesType (const BaseName_type&,
                   const WriteFrequency_type&);

  OutputFilesType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  OutputFilesType (const OutputFilesType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual OutputFilesType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  OutputFilesType&
  operator= (const OutputFilesType& x);

  virtual 
  ~OutputFilesType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< BaseName_type > BaseName_;
  ::xsd::cxx::tree::one< WriteFrequency_type > WriteFrequency_;
};

class SimulationParametersType: public ::xml_schema::type
{
  public:
  // EndT
  //
  typedef ::xml_schema::decimal EndT_type;
  typedef ::xsd::cxx::tree::traits< EndT_type, char, ::xsd::cxx::tree::schema_type::decimal > EndT_traits;

  const EndT_type&
  EndT () const;

  EndT_type&
  EndT ();

  void
  EndT (const EndT_type& x);

  // DeltaT
  //
  typedef ::xml_schema::decimal DeltaT_type;
  typedef ::xsd::cxx::tree::traits< DeltaT_type, char, ::xsd::cxx::tree::schema_type::decimal > DeltaT_traits;

  const DeltaT_type&
  DeltaT () const;

  DeltaT_type&
  DeltaT ();

  void
  DeltaT (const DeltaT_type& x);

  // Constructors.
  //
  SimulationParametersType (const EndT_type&,
                            const DeltaT_type&);

  SimulationParametersType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

  SimulationParametersType (const SimulationParametersType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

  virtual SimulationParametersType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  SimulationParametersType&
  operator= (const SimulationParametersType& x);

  virtual 
  ~SimulationParametersType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< EndT_type > EndT_;
  ::xsd::cxx::tree::one< DeltaT_type > DeltaT_;
};

class CuboidsType: public ::xml_schema::type
{
  public:
  // Cuboid
  //
  typedef ::CuboidType Cuboid_type;
  typedef ::xsd::cxx::tree::sequence< Cuboid_type > Cuboid_sequence;
  typedef Cuboid_sequence::iterator Cuboid_iterator;
  typedef Cuboid_sequence::const_iterator Cuboid_const_iterator;
  typedef ::xsd::cxx::tree::traits< Cuboid_type, char > Cuboid_traits;

  const Cuboid_sequence&
  Cuboid () const;

  Cuboid_sequence&
  Cuboid ();

  void
  Cuboid (const Cuboid_sequence& s);

  // Constructors.
  //
  CuboidsType ();

  CuboidsType (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  CuboidsType (const CuboidsType& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual CuboidsType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  CuboidsType&
  operator= (const CuboidsType& x);

  virtual 
  ~CuboidsType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Cuboid_sequence Cuboid_;
};

class CuboidType: public ::xml_schema::type
{
  public:
  // LowerLeftFrontCorner
  //
  typedef ::ArrayFloat3 LowerLeftFrontCorner_type;
  typedef ::xsd::cxx::tree::traits< LowerLeftFrontCorner_type, char > LowerLeftFrontCorner_traits;

  const LowerLeftFrontCorner_type&
  LowerLeftFrontCorner () const;

  LowerLeftFrontCorner_type&
  LowerLeftFrontCorner ();

  void
  LowerLeftFrontCorner (const LowerLeftFrontCorner_type& x);

  void
  LowerLeftFrontCorner (::std::unique_ptr< LowerLeftFrontCorner_type > p);

  // NumParticlesPerDimension
  //
  typedef ::ArrayInt3 NumParticlesPerDimension_type;
  typedef ::xsd::cxx::tree::traits< NumParticlesPerDimension_type, char > NumParticlesPerDimension_traits;

  const NumParticlesPerDimension_type&
  NumParticlesPerDimension () const;

  NumParticlesPerDimension_type&
  NumParticlesPerDimension ();

  void
  NumParticlesPerDimension (const NumParticlesPerDimension_type& x);

  void
  NumParticlesPerDimension (::std::unique_ptr< NumParticlesPerDimension_type > p);

  // Distance
  //
  typedef ::xml_schema::decimal Distance_type;
  typedef ::xsd::cxx::tree::traits< Distance_type, char, ::xsd::cxx::tree::schema_type::decimal > Distance_traits;

  const Distance_type&
  Distance () const;

  Distance_type&
  Distance ();

  void
  Distance (const Distance_type& x);

  // Mass
  //
  typedef ::xml_schema::decimal Mass_type;
  typedef ::xsd::cxx::tree::traits< Mass_type, char, ::xsd::cxx::tree::schema_type::decimal > Mass_traits;

  const Mass_type&
  Mass () const;

  Mass_type&
  Mass ();

  void
  Mass (const Mass_type& x);

  // StartV
  //
  typedef ::ArrayFloat3 StartV_type;
  typedef ::xsd::cxx::tree::traits< StartV_type, char > StartV_traits;

  const StartV_type&
  StartV () const;

  StartV_type&
  StartV ();

  void
  StartV (const StartV_type& x);

  void
  StartV (::std::unique_ptr< StartV_type > p);

  // MeanV
  //
  typedef ::xml_schema::decimal MeanV_type;
  typedef ::xsd::cxx::tree::traits< MeanV_type, char, ::xsd::cxx::tree::schema_type::decimal > MeanV_traits;

  const MeanV_type&
  MeanV () const;

  MeanV_type&
  MeanV ();

  void
  MeanV (const MeanV_type& x);

  // Dimension
  //
  typedef ::xml_schema::int_ Dimension_type;
  typedef ::xsd::cxx::tree::traits< Dimension_type, char > Dimension_traits;

  const Dimension_type&
  Dimension () const;

  Dimension_type&
  Dimension ();

  void
  Dimension (const Dimension_type& x);

  // Constructors.
  //
  CuboidType (const LowerLeftFrontCorner_type&,
              const NumParticlesPerDimension_type&,
              const Distance_type&,
              const Mass_type&,
              const StartV_type&,
              const MeanV_type&,
              const Dimension_type&);

  CuboidType (::std::unique_ptr< LowerLeftFrontCorner_type >,
              ::std::unique_ptr< NumParticlesPerDimension_type >,
              const Distance_type&,
              const Mass_type&,
              ::std::unique_ptr< StartV_type >,
              const MeanV_type&,
              const Dimension_type&);

  CuboidType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  CuboidType (const CuboidType& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual CuboidType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  CuboidType&
  operator= (const CuboidType& x);

  virtual 
  ~CuboidType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< LowerLeftFrontCorner_type > LowerLeftFrontCorner_;
  ::xsd::cxx::tree::one< NumParticlesPerDimension_type > NumParticlesPerDimension_;
  ::xsd::cxx::tree::one< Distance_type > Distance_;
  ::xsd::cxx::tree::one< Mass_type > Mass_;
  ::xsd::cxx::tree::one< StartV_type > StartV_;
  ::xsd::cxx::tree::one< MeanV_type > MeanV_;
  ::xsd::cxx::tree::one< Dimension_type > Dimension_;
};

class ArrayFloat3: public ::xml_schema::type
{
  public:
  // X
  //
  typedef ::xml_schema::decimal X_type;
  typedef ::xsd::cxx::tree::traits< X_type, char, ::xsd::cxx::tree::schema_type::decimal > X_traits;

  const X_type&
  X () const;

  X_type&
  X ();

  void
  X (const X_type& x);

  // Y
  //
  typedef ::xml_schema::decimal Y_type;
  typedef ::xsd::cxx::tree::traits< Y_type, char, ::xsd::cxx::tree::schema_type::decimal > Y_traits;

  const Y_type&
  Y () const;

  Y_type&
  Y ();

  void
  Y (const Y_type& x);

  // Z
  //
  typedef ::xml_schema::decimal Z_type;
  typedef ::xsd::cxx::tree::traits< Z_type, char, ::xsd::cxx::tree::schema_type::decimal > Z_traits;

  const Z_type&
  Z () const;

  Z_type&
  Z ();

  void
  Z (const Z_type& x);

  // Constructors.
  //
  ArrayFloat3 (const X_type&,
               const Y_type&,
               const Z_type&);

  ArrayFloat3 (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  ArrayFloat3 (const ArrayFloat3& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual ArrayFloat3*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  ArrayFloat3&
  operator= (const ArrayFloat3& x);

  virtual 
  ~ArrayFloat3 ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< X_type > X_;
  ::xsd::cxx::tree::one< Y_type > Y_;
  ::xsd::cxx::tree::one< Z_type > Z_;
};

class ArrayInt3: public ::xml_schema::type
{
  public:
  // X
  //
  typedef ::xml_schema::int_ X_type;
  typedef ::xsd::cxx::tree::traits< X_type, char > X_traits;

  const X_type&
  X () const;

  X_type&
  X ();

  void
  X (const X_type& x);

  // Y
  //
  typedef ::xml_schema::int_ Y_type;
  typedef ::xsd::cxx::tree::traits< Y_type, char > Y_traits;

  const Y_type&
  Y () const;

  Y_type&
  Y ();

  void
  Y (const Y_type& x);

  // Z
  //
  typedef ::xml_schema::int_ Z_type;
  typedef ::xsd::cxx::tree::traits< Z_type, char > Z_traits;

  const Z_type&
  Z () const;

  Z_type&
  Z ();

  void
  Z (const Z_type& x);

  // Constructors.
  //
  ArrayInt3 (const X_type&,
             const Y_type&,
             const Z_type&);

  ArrayInt3 (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  ArrayInt3 (const ArrayInt3& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual ArrayInt3*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  ArrayInt3&
  operator= (const ArrayInt3& x);

  virtual 
  ~ArrayInt3 ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< X_type > X_;
  ::xsd::cxx::tree::one< Y_type > Y_;
  ::xsd::cxx::tree::one< Z_type > Z_;
};

class SimulationInput: public ::xml_schema::type
{
  public:
  // OutputFiles
  //
  typedef ::OutputFilesType OutputFiles_type;
  typedef ::xsd::cxx::tree::traits< OutputFiles_type, char > OutputFiles_traits;

  const OutputFiles_type&
  OutputFiles () const;

  OutputFiles_type&
  OutputFiles ();

  void
  OutputFiles (const OutputFiles_type& x);

  void
  OutputFiles (::std::unique_ptr< OutputFiles_type > p);

  // SimulationParameters
  //
  typedef ::SimulationParametersType SimulationParameters_type;
  typedef ::xsd::cxx::tree::traits< SimulationParameters_type, char > SimulationParameters_traits;

  const SimulationParameters_type&
  SimulationParameters () const;

  SimulationParameters_type&
  SimulationParameters ();

  void
  SimulationParameters (const SimulationParameters_type& x);

  void
  SimulationParameters (::std::unique_ptr< SimulationParameters_type > p);

  // Cuboids
  //
  typedef ::CuboidsType Cuboids_type;
  typedef ::xsd::cxx::tree::traits< Cuboids_type, char > Cuboids_traits;

  const Cuboids_type&
  Cuboids () const;

  Cuboids_type&
  Cuboids ();

  void
  Cuboids (const Cuboids_type& x);

  void
  Cuboids (::std::unique_ptr< Cuboids_type > p);

  // Constructors.
  //
  SimulationInput (const OutputFiles_type&,
                   const SimulationParameters_type&,
                   const Cuboids_type&);

  SimulationInput (::std::unique_ptr< OutputFiles_type >,
                   ::std::unique_ptr< SimulationParameters_type >,
                   ::std::unique_ptr< Cuboids_type >);

  SimulationInput (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  SimulationInput (const SimulationInput& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual SimulationInput*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  SimulationInput&
  operator= (const SimulationInput& x);

  virtual 
  ~SimulationInput ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< OutputFiles_type > OutputFiles_;
  ::xsd::cxx::tree::one< SimulationParameters_type > SimulationParameters_;
  ::xsd::cxx::tree::one< Cuboids_type > Cuboids_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::unique_ptr< ::SimulationInput >
SimulationInput_ (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::SimulationInput >
SimulationInput_ (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::SimulationInput >
SimulationInput_ (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::unique_ptr< ::SimulationInput >
SimulationInput_ (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::SimulationInput >
SimulationInput_ (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::SimulationInput >
SimulationInput_ (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::SimulationInput >
SimulationInput_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::SimulationInput >
SimulationInput_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::SimulationInput >
SimulationInput_ (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::unique_ptr< ::SimulationInput >
SimulationInput_ (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::SimulationInput >
SimulationInput_ (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::SimulationInput >
SimulationInput_ (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::unique_ptr< ::SimulationInput >
SimulationInput_ (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::SimulationInput >
SimulationInput_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIMULATION_INPUT_SPEC_HXX
